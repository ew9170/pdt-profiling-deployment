"""
Author: Eaton Wu
This file contains postgres queries that use a connection passed as a parameter.
"""

import logging
import psycopg2
import random


def get_random_table(conn):
    with conn:
        with conn.cursor() as cursor:
            cursor.execute("select * from information_schema.tables where table_schema = 'public' "
                           "ORDER BY RAND() LIMIT 1;")
            query_response = cursor.fetchone()  # returns a tuple, (dbname, table_schema, table_name, ...)
            if query_response is not None:
                table_name = query_response[2]
                return table_name


def select_one_random_row_from_table(conn, table_name):
    """
    :param conn: a postgres connection created by psycopg2.connect()
    :param table_name: a table name obtained probably using get_random_table()
    :return: a tuple containing an entry from table_name
    """
    with conn:
        with conn.cursor() as cursor:
            try:
                cursor.execute("select * from {table_name} ORDER BY RAND() LIMIT 1".format(table_name=table_name))
                query_response = cursor.fetchone()
                if query_response is not None:
                    return query_response
            except psycopg2.ProgrammingError as e:
                logging.error(e)


def select_random_rows_from_table(conn, table_name, min_range=None, max_range=None) -> list:
    """
    This selects a random quantity of rows from a specified table
    It's possible for the min_range or max_range to be unspecified in the configs, so None may be passed into

    :param conn: psycopg2 postgres connection generated by psycopg2.connect()
    :param table_name: a name of a postgresql table
    :param min_range: minimum of rows selected, defaults to 1
    :param max_range: maximum of rows selected, defaults to 20
    :return: a list of tuples, which represent the rows returned from the query
    """
    if min_range is None:
        min_range = 1
    if max_range is None:
        max_range = 20

    with conn:
        with conn.cursor() as cursor:
            try:
                random_number = random.randrange(min_range, max_range)
                cursor.execute("select * from {table} ORDER BY RAND() LIMIT {rand_limit}".format(
                    table=table_name,
                    rand_limit=random_number))
                query_response = cursor.fetchall()
                if query_response is not None:
                    return query_response
            except psycopg2.ProgrammingError as e:
                logging.error(e)


if __name__ == '__main__':
    print("Module not meant to be run as main")
